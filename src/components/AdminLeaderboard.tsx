import React, { useEffect, useState } from 'react';
import { Trophy, Trash2, RefreshCw, Clock, User } from 'lucide-react';
import { supabase } from '../lib/supabase';

interface LeaderboardEntry {
  user_id: string;
  user_name: string;
  email: string;
  average_score: number;
  total_attempts: number;
  best_score: number;
  best_time: number;
  rank: number;
  last_attempt_at: string | null;
}

export const AdminLeaderboard: React.FC = () => {
  const [topUsers, setTopUsers] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchTopUsers();
  }, []);

  const fetchTopUsers = async () => {
    if (!supabase) {
      setError('Ch∆∞a c·∫•u h√¨nh Supabase');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const { data, error: fetchError } = await supabase
        .from('quiz_rankings')
        .select('*')
        .limit(10);

      if (fetchError) throw fetchError;

      setTopUsers(data || []);
      setError(null);
    } catch (err) {
      console.error('L·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng');
    } finally {
      setLoading(false);
    }
  };

  const handleClearRankings = async () => {
    if (!window.confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu x·∫øp h·∫°ng?\n\nH√†nh ƒë·ªông n√†y s·∫Ω:\n- X√≥a t·∫•t c·∫£ k·∫øt qu·∫£ thi\n- X√≥a t·∫•t c·∫£ x·∫øp h·∫°ng\n- KH√îNG TH·ªÇ ho√†n t√°c!\n\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?')) {
      return;
    }

    if (!window.confirm('üö® L·∫¶N CU·ªêI: B·∫°n TH·ª∞C S·ª∞ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu x·∫øp h·∫°ng?')) {
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // Count total records first
      const { count, error: countError } = await supabase
        .from('quiz_results')
        .select('*', { count: 'exact', head: true });

      if (countError) {
        console.error('L·ªói ƒë·∫øm records:', countError);
        throw countError;
      }

      if (!count || count === 0) {
        alert('‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ x√≥a!');
        setLoading(false);
        return;
      }

      // Delete in batches to avoid timeout
      const batchSize = 100;
      let deletedCount = 0;
      let hasMore = true;

      while (hasMore) {
        // Get a batch of records
        const { data: batch, error: fetchError } = await supabase
          .from('quiz_results')
          .select('id')
          .limit(batchSize);

        if (fetchError) {
          console.error('L·ªói l·∫•y batch:', fetchError);
          throw fetchError;
        }

        if (!batch || batch.length === 0) {
          hasMore = false;
          break;
        }

        // Delete this batch
        const { error: deleteError } = await supabase
          .from('quiz_results')
          .delete()
          .in('id', batch.map(r => r.id));

        if (deleteError) {
          console.error('L·ªói x√≥a batch:', deleteError);
          throw deleteError;
        }

        deletedCount += batch.length;

        // If we got less than batch size, we're done
        if (batch.length < batchSize) {
          hasMore = false;
        }
      }

      alert(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ${deletedCount} k·∫øt qu·∫£ thi!`);
      await fetchTopUsers();
    } catch (err) {
      console.error('L·ªói khi x√≥a x·∫øp h·∫°ng:', err);
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(`L·ªói khi x√≥a d·ªØ li·ªáu: ${errorMessage}`);
      alert('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: ' + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'Ch∆∞a c√≥';
    const date = new Date(dateString);
    return date.toLocaleString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg border border-gray-300 p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <Trophy className="w-6 h-6 text-[#A50034]" />
            <h2 className="text-xl font-semibold text-gray-800">Th·ªëng k√™ x·∫øp h·∫°ng</h2>
          </div>
        </div>
        <div className="text-center py-8 text-gray-500">
          ƒêang t·∫£i...
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg border border-gray-300 p-4 md:p-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-3 mb-4">
        <div className="flex items-center gap-3">
          <Trophy className="w-6 h-6 text-[#A50034]" />
          <h2 className="text-lg md:text-xl font-semibold text-gray-800">Th·ªëng k√™ x·∫øp h·∫°ng (Top 10)</h2>
        </div>
        <div className="flex gap-2">
          <button
            onClick={fetchTopUsers}
            disabled={loading}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors text-sm"
          >
            <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
            L√†m m·ªõi
          </button>
          <button
            onClick={handleClearRankings}
            disabled={loading || topUsers.length === 0}
            className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors text-sm"
          >
            <Trash2 className="w-4 h-4" />
            X√≥a t·∫•t c·∫£
          </button>
        </div>
      </div>

      {error && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
          {error}
        </div>
      )}

      {topUsers.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng
        </div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead className="bg-gray-50 border-b-2 border-gray-200">
                <tr>
                  <th className="px-3 py-3 text-left font-semibold text-gray-700">H·∫°ng</th>
                  <th className="px-3 py-3 text-left font-semibold text-gray-700">H·ªç v√† t√™n</th>
                  <th className="px-3 py-3 text-center font-semibold text-gray-700">S·ªë l·∫ßn thi</th>
                  <th className="px-3 py-3 text-center font-semibold text-gray-700">ƒêi·ªÉm TB</th>
                  <th className="px-3 py-3 text-center font-semibold text-gray-700">ƒêi·ªÉm cao nh·∫•t</th>
                  <th className="px-3 py-3 text-center font-semibold text-gray-700">Th·ªùi gian t·ªët nh·∫•t</th>
                  <th className="px-3 py-3 text-left font-semibold text-gray-700">L·∫ßn thi g·∫ßn nh·∫•t</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {topUsers.map((entry) => (
                  <tr key={entry.user_id} className="hover:bg-gray-50 transition-colors">
                    <td className="px-3 py-3">
                      <div className="flex items-center gap-2">
                        {entry.rank === 1 && <Trophy className="w-5 h-5 text-yellow-500" />}
                        {entry.rank === 2 && <Trophy className="w-5 h-5 text-gray-400" />}
                        {entry.rank === 3 && <Trophy className="w-5 h-5 text-amber-600" />}
                        <span className="font-semibold text-gray-900">#{entry.rank}</span>
                      </div>
                    </td>
                    <td className="px-3 py-3">
                      <div className="flex items-center gap-2">
                        <User className="w-4 h-4 text-gray-400 flex-shrink-0" />
                        <div className="min-w-0">
                          <div className="font-medium text-gray-900 truncate">
                            {entry.user_name || 'Ch∆∞a c√≥ t√™n'}
                          </div>
                          <div className="text-xs text-gray-500 truncate">
                            {entry.email}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-3 py-3 text-center">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        {entry.total_attempts} l·∫ßn
                      </span>
                    </td>
                    <td className="px-3 py-3 text-center">
                      <span className="font-semibold text-[#A50034]">
                        {entry.average_score.toFixed(1)}%
                      </span>
                    </td>
                    <td className="px-3 py-3 text-center">
                      <span className="font-semibold text-green-600">
                        {entry.best_score.toFixed(1)}%
                      </span>
                    </td>
                    <td className="px-3 py-3 text-center">
                      <div className="flex items-center justify-center gap-1">
                        <Clock className="w-3 h-3 text-gray-400" />
                        <span className="text-gray-700">{formatTime(entry.best_time)}</span>
                      </div>
                    </td>
                    <td className="px-3 py-3">
                      <span className="text-xs text-gray-600">
                        {formatDate(entry.last_attempt_at)}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p className="text-sm text-yellow-800">
              <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> N√∫t "X√≥a t·∫•t c·∫£" s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu k·∫øt qu·∫£ thi v√† x·∫øp h·∫°ng.
              Ch·ªâ s·ª≠ d·ª•ng khi test xong v√† chu·∫©n b·ªã ƒë∆∞a v√†o ho·∫°t ƒë·ªông ch√≠nh th·ª©c.
            </p>
          </div>
        </>
      )}
    </div>
  );
};
