import React, { useEffect, useState } from 'react';
import { Trophy, Medal, Award, TrendingUp } from 'lucide-react';
import { supabase } from '../lib/supabase';

interface LeaderboardEntry {
  user_id: string;
  user_name: string;
  email: string;
  average_score: number;
  total_attempts: number;
  best_score: number;
  best_time: number;
  rank: number;
}

interface LeaderboardProps {
  refreshTrigger?: number;
}

export const Leaderboard: React.FC<LeaderboardProps> = ({ refreshTrigger }) => {
  const [topUsers, setTopUsers] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchTopUsers();
  }, [refreshTrigger]);

  useEffect(() => {
    fetchTopUsers();

    const interval = setInterval(() => {
      fetchTopUsers();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const fetchTopUsers = async () => {
    if (!supabase) {
      setError('Ch∆∞a c·∫•u h√¨nh Supabase');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const { data, error: fetchError } = await supabase
        .from('quiz_rankings')
        .select('*')
        .limit(10);

      if (fetchError) throw fetchError;

      setTopUsers(data || []);
      setError(null);
    } catch (err) {
      console.error('L·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng');
    } finally {
      setLoading(false);
    }
  };

  const getTitle = (rank: number) => {
    const titles = [
      'üèÜ CAO TH·ª¶ V√ÄNG - THI√äN H·∫† V√î ƒê·ªäCH',
      'ü•à CAO TH·ª¶ B·∫†C - ƒê·ªòC C√î C·∫¶U B·∫†I',
      'ü•â CAO TH·ª¶ ƒê·ªíNG - ƒê·∫†I HI·ªÜP LANG THANG',
      '‚≠ê CAO TH·ª¶ - T√ÇN MINH CH·ª¶ V√ï L√ÇM',
      '‚≠ê CAO TH·ª¶ - ·∫®N TH·∫æ CAO NH√ÇN',
      '‚≠ê CAO TH·ª¶ - TR∆Ø·ªûNG L√ÉO ƒÇN MAY',
      '‚≠ê CAO TH·ª¶ - ƒê·ªÜ NH·∫§T ƒÇN H√ÄNH',
      '‚≠ê CAO TH·ª¶ - C·∫¶N V∆Ø∆†NG KI·∫æM KH√ÅCH',
      '‚≠ê CAO TH·ª¶ - ƒê·ªí ƒê·ªÜ V·ª™A XU·ªêNG N√öI',
      '‚≠ê CAO TH·ª¶ - T√ÇN TH·ª¶ T·∫¨P T·ªÑNH'
    ];
    return titles[rank - 1] || '‚≠ê CAO TH·ª¶ - T·∫¨P T·ªÑNH H·ªåC H·ªéI';
  };

  const getRankIcon = (rank: number) => {
    switch (rank) {
      case 1:
        return <Trophy className="w-6 h-6 md:w-7 md:h-7 text-yellow-500" />;
      case 2:
        return <Medal className="w-6 h-6 md:w-7 md:h-7 text-gray-400" />;
      case 3:
        return <Award className="w-6 h-6 md:w-7 md:h-7 text-amber-600" />;
      default:
        return <TrendingUp className="w-5 h-5 md:w-6 md:h-6 text-blue-500" />;
    }
  };

  const getRankBgColor = (rank: number) => {
    switch (rank) {
      case 1:
        return 'bg-gradient-to-r from-yellow-50 to-yellow-100 border-yellow-300';
      case 2:
        return 'bg-gradient-to-r from-gray-50 to-gray-100 border-gray-300';
      case 3:
        return 'bg-gradient-to-r from-amber-50 to-amber-100 border-amber-300';
      case 4:
      case 5:
        return 'bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200';
      case 6:
      case 7:
        return 'bg-gradient-to-r from-green-50 to-green-100 border-green-200';
      default:
        return 'bg-gradient-to-r from-gray-50 to-gray-100 border-gray-200';
    }
  };

  const getTitleColor = (rank: number) => {
    switch (rank) {
      case 1:
        return 'text-yellow-600';
      case 2:
        return 'text-gray-600';
      case 3:
        return 'text-amber-600';
      case 4:
      case 5:
        return 'text-blue-600';
      case 6:
      case 7:
        return 'text-green-600';
      default:
        return 'text-gray-600';
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-4">
          <Trophy className="w-6 h-6 text-[#A50034]" />
          <h2 className="text-xl font-semibold text-gray-800">B·∫£ng X·∫øp H·∫°ng</h2>
        </div>
        <div className="text-center py-8 text-gray-500">
          ƒêang t·∫£i...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-4">
          <Trophy className="w-6 h-6 text-[#A50034]" />
          <h2 className="text-xl font-semibold text-gray-800">B·∫£ng X·∫øp H·∫°ng</h2>
        </div>
        <div className="text-center py-8 text-red-500">
          {error}
        </div>
      </div>
    );
  }

  if (topUsers.length === 0) {
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-4">
          <Trophy className="w-6 h-6 text-[#A50034]" />
          <h2 className="text-xl font-semibold text-gray-800">B·∫£ng X·∫øp H·∫°ng</h2>
        </div>
        <div className="text-center py-8 text-gray-500">
          Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg border border-gray-200 p-4 md:p-6">
      <div className="flex items-center gap-2 md:gap-3 mb-4">
        <Trophy className="w-5 h-5 md:w-6 md:h-6 text-[#A50034]" />
        <h2 className="text-lg md:text-xl font-semibold text-gray-800">üèÜ B·∫£ng X·∫øp H·∫°ng Cao Th·ªß</h2>
      </div>

      <div className="space-y-2">
        {topUsers.map((entry) => (
          <div
            key={entry.user_id}
            className={`flex items-center gap-3 p-3 rounded-lg border-2 transition-all hover:shadow-md ${getRankBgColor(entry.rank)}`}
          >
            <div className="flex-shrink-0 flex items-center gap-2">
              <div className="text-lg font-bold text-gray-700 w-6 text-center">
                #{entry.rank}
              </div>
              {getRankIcon(entry.rank)}
            </div>

            <div className="flex-1 min-w-0">
              <div className="font-semibold text-gray-900 text-sm md:text-base truncate">
                {entry.user_name || entry.email}
              </div>
              <div className={`text-xs md:text-sm font-medium ${getTitleColor(entry.rank)}`}>
                {getTitle(entry.rank)}
              </div>
            </div>

            <div className="text-right flex-shrink-0">
              <div className="text-lg md:text-xl font-bold text-green-600">
                {entry.average_score.toFixed(0)}% {entry.average_score >= 80 ? '‚úÖ' : 'üìä'}
              </div>
              <div className="text-xs text-gray-500">
                ‚è±Ô∏è {formatTime(entry.best_time)}
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-4 p-3 bg-gradient-to-r from-yellow-50 to-amber-50 border-2 border-yellow-300 rounded-lg">
        <p className="text-xs md:text-sm text-gray-700">
          <strong className="text-[#A50034]">üåü B·∫£ng Vinh Danh Cao Th·ªß:</strong> Top 10 th√≠ sinh c√≥ ƒëi·ªÉm s·ªë cao nh·∫•t. N·∫øu ƒëi·ªÉm b·∫±ng nhau, th·ª© h·∫°ng ƒë∆∞·ª£c x·∫øp theo th·ªùi gian ho√†n th√†nh nhanh nh·∫•t. Danh hi·ªáu cao th·ªß s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t theo th·ª© h·∫°ng!
        </p>
      </div>
    </div>
  );
};
