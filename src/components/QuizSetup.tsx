import React, { useState } from 'react';
import { Upload, Download, Settings, Play, Database, Trash2, Plus, HelpCircle } from 'lucide-react';
import { Question, QuizConfig } from '../types/quiz';
import { parseCSV } from '../utils/csvParser';
import { parseXLSX, generateXLSX, generateSampleXLSX } from '../utils/xlsxParser';

interface QuizSetupProps {
  questions: Question[];
  loading: boolean;
  error: string | null;
  onQuestionsImport: (questions: Question[], replaceAll?: boolean) => void;
  onClearQuestions: () => void;
  onStartQuiz: (config: QuizConfig) => void;
  isSupabaseConfigured?: boolean;
}

export const QuizSetup: React.FC<QuizSetupProps> = ({
  questions,
  loading,
  error,
  onQuestionsImport,
  onClearQuestions,
  onStartQuiz,
  isSupabaseConfigured = false
}) => {
  const [mode, setMode] = useState<'practice' | 'exam'>('practice');
  const [timeLimit, setTimeLimit] = useState(60);
  const [totalQuestions, setTotalQuestions] = useState(20);
  const [selectedCategories, setSelectedCategories] = useState<{ [key: string]: number }>({});
  const [importMode, setImportMode] = useState<'replace' | 'add'>('add');

  const categories = [...new Set(questions.map(q => q.category))];

  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    console.log(`üìÅ File ƒë∆∞·ª£c ch·ªçn: ${file.name}, Size: ${(file.size / 1024 / 1024).toFixed(2)}MB`);

    if (file.name.endsWith('.xlsx')) {
      // X·ª≠ l√Ω file Excel
      parseXLSX(file)
        .then(result => {
          const { questions: importedQuestions, errors } = result;
          console.log(`‚úÖ Excel parsed: ${importedQuestions.length} c√¢u h·ªèi h·ª£p l·ªá, ${errors.length} l·ªói`);

          // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
          if (errors.length > 0) {
            const maxShow = 20;
            const errorList = errors.slice(0, maxShow).map(e => `  ‚Ä¢ D√≤ng ${e.row}: ${e.message}`).join('\n');
            const moreErrors = errors.length > maxShow ? `\n  ... v√† ${errors.length - maxShow} l·ªói kh√°c` : '';

            alert(`‚ö†Ô∏è T√¨m th·∫•y ${errors.length} d√≤ng l·ªói (ƒë√£ b·ªè qua):\n\n${errorList}${moreErrors}\n\n‚úÖ Import th√†nh c√¥ng ${importedQuestions.length} c√¢u h·ªèi h·ª£p l·ªá.`);
          }

          if (importedQuestions.length >= 1000) {
            const confirmMsg = `‚ö†Ô∏è File c√≥ ${importedQuestions.length} c√¢u h·ªèi.\n\n‚è±Ô∏è Qu√° tr√¨nh import c√≥ th·ªÉ m·∫•t v√†i ph√∫t.\n\n‚úÖ Vui l√≤ng KH√îNG ƒë√≥ng tr√¨nh duy·ªát trong khi ƒëang import.\n\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?`;
            if (!confirm(confirmMsg)) {
              return;
            }
            alert(`‚è≥ ƒêang import ${importedQuestions.length} c√¢u h·ªèi...\n\n‚úì Vui l√≤ng ch·ªù v√† theo d√µi Console log ƒë·ªÉ xem ti·∫øn tr√¨nh.\n‚úì KH√îNG ƒë√≥ng tr√¨nh duy·ªát cho ƒë·∫øn khi ho√†n t·∫•t.`);
          }

          onQuestionsImport(importedQuestions, importMode === 'replace');
        })
        .catch(error => {
          console.error('‚ùå Chi ti·∫øt l·ªói:', error);
          alert(`‚ùå L·ªói ƒë·ªçc file Excel: ${error.message}\n\nüí° Ki·ªÉm tra:\n- File c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng?\n- C√°c c·ªôt b·∫Øt bu·ªôc: question, option_a, option_b, option_c, option_d, correct_answer, category\n- ƒê√°p √°n ƒë√∫ng ph·∫£i l√† s·ªë 1-4`);
        });
    } else {
      // X·ª≠ l√Ω file JSON/CSV nh∆∞ c≈©
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const content = e.target?.result as string;
          console.log(`üìÑ File content length: ${content.length} characters`);
          
          let importedQuestions: Question[];

          if (file.name.endsWith('.json')) {
            importedQuestions = JSON.parse(content);
            console.log(`‚úÖ JSON parsed: ${importedQuestions.length} c√¢u h·ªèi`);
          } else if (file.name.endsWith('.csv')) {
            const result = parseCSV(content);
            importedQuestions = result.questions;
            console.log(`‚úÖ CSV parsed: ${importedQuestions.length} c√¢u h·ªèi`);

            if (result.errors.length > 0) {
              const maxShow = 20;
              const errorList = result.errors.slice(0, maxShow).map(e => `  ‚Ä¢ D√≤ng ${e.row}: ${e.message}`).join('\n');
              const moreErrors = result.errors.length > maxShow ? `\n  ... v√† ${result.errors.length - maxShow} l·ªói kh√°c` : '';
              alert(`‚ö†Ô∏è T√¨m th·∫•y ${result.errors.length} d√≤ng l·ªói (ƒë√£ b·ªè qua):\n\n${errorList}${moreErrors}\n\n‚úÖ Import th√†nh c√¥ng ${importedQuestions.length} c√¢u h·ªèi h·ª£p l·ªá.`);
            }
          } else {
            throw new Error('ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£');
          }

          if (importedQuestions.length >= 1000) {
            const confirmMsg = `‚ö†Ô∏è File c√≥ ${importedQuestions.length} c√¢u h·ªèi.\n\n‚è±Ô∏è Qu√° tr√¨nh import c√≥ th·ªÉ m·∫•t v√†i ph√∫t.\n\n‚úÖ Vui l√≤ng KH√îNG ƒë√≥ng tr√¨nh duy·ªát trong khi ƒëang import.\n\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?`;
            if (!confirm(confirmMsg)) {
              return;
            }
            alert(`‚è≥ ƒêang import ${importedQuestions.length} c√¢u h·ªèi...\n\n‚úì Vui l√≤ng ch·ªù v√† theo d√µi Console log ƒë·ªÉ xem ti·∫øn tr√¨nh.\n‚úì KH√îNG ƒë√≥ng tr√¨nh duy·ªát cho ƒë·∫øn khi ho√†n t·∫•t.`);
          }

          onQuestionsImport(importedQuestions, importMode === 'replace');
        } catch (error) {
          alert('L·ªói khi ƒë·ªçc file. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.');
        }
      };
      reader.readAsText(file);
    }
  };

  const handleClearDatabase = async () => {
    if (window.confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ c√¢u h·ªèi trong c∆° s·ªü d·ªØ li·ªáu?\n\nH√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ ho√†n t√°c!')) {
      await onClearQuestions();
      alert('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ c√¢u h·ªèi kh·ªèi c∆° s·ªü d·ªØ li·ªáu!');
    }
  };

  const handleExportExcel = () => {
    if (questions.length === 0) {
      alert('Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë·ªÉ xu·∫•t!');
      return;
    }
    try {
      generateXLSX(questions);
      alert(`ƒê√£ xu·∫•t th√†nh c√¥ng ${questions.length} c√¢u h·ªèi ra file Excel!`);
    } catch (error) {
      alert('L·ªói khi xu·∫•t file Excel!');
    }
  };

  const downloadSampleExcel = () => {
    try {
      generateSampleXLSX();
      alert('ƒê√£ t·∫£i xu·ªëng file Excel m·∫´u th√†nh c√¥ng!');
    } catch (error) {
      alert('L·ªói khi t·∫°o file Excel m·∫´u!');
    }
  };

  const handleExportQuestions = () => {
    if (questions.length === 0) {
      alert('Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë·ªÉ xu·∫•t!');
      return;
    }
    try {
      const dataStr = JSON.stringify(questions, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `questions_${new Date().toISOString().split('T')[0]}.json`;
      link.click();
      URL.revokeObjectURL(url);
      alert(`ƒê√£ xu·∫•t th√†nh c√¥ng ${questions.length} c√¢u h·ªèi ra file JSON!`);
    } catch (error) {
      alert('L·ªói khi xu·∫•t file JSON!');
    }
  };

  const downloadSampleJSON = () => {
    const sampleQuestions = [
      {
        "id": "geo_001",
        "question": "Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?",
        "options": ["H·ªì Ch√≠ Minh", "H√† N·ªôi", "ƒê√† N·∫µng", "C·∫ßn Th∆°"],
        "correctAnswer": 2,
        "explanation": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa n∆∞·ªõc C·ªông h√≤a X√£ h·ªôi ch·ªß nghƒ©a Vi·ªát Nam t·ª´ nƒÉm 1976.",
        "category": "ƒê·ªãa l√Ω"
      },
      {
        "id": "math_001",
        "question": "K·∫øt qu·∫£ c·ªßa 15 + 25 √ó 2 l√† bao nhi√™u?",
        "options": ["80", "65", "55", "70"],
        "correctAnswer": 2,
        "explanation": "Theo th·ª© t·ª± ∆∞u ti√™n ph√©p t√≠nh: 25 √ó 2 = 50, sau ƒë√≥ 15 + 50 = 65.",
        "category": "To√°n h·ªçc"
      },
      {
        "id": "chem_001",
        "question": "Nguy√™n t·ªë h√≥a h·ªçc n√†o c√≥ k√Ω hi·ªáu l√† 'O'?",
        "options": ["Oxi", "V√†ng", "B·∫°c", "S·∫Øt"],
        "correctAnswer": 1,
        "explanation": "Oxi (Oxygen) c√≥ k√Ω hi·ªáu h√≥a h·ªçc l√† O, l√† nguy√™n t·ªë thi·∫øt y·∫øu cho s·ª± s·ªëng.",
        "category": "H√≥a h·ªçc"
      },
      {
        "id": "hist_001",
        "question": "Vi·ªát Nam gi√†nh ƒë·ªôc l·∫≠p v√†o nƒÉm n√†o?",
        "options": ["1945", "1954", "1975", "1976"],
        "correctAnswer": 1,
        "explanation": "Vi·ªát Nam tuy√™n b·ªë ƒë·ªôc l·∫≠p v√†o ng√†y 2/9/1945 v·ªõi b·∫£n Tuy√™n ng√¥n ƒë·ªôc l·∫≠p do Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc.",
        "category": "L·ªãch s·ª≠"
      },
      {
        "id": "lit_001",
        "question": "Ai l√† t√°c gi·∫£ c·ªßa t√°c ph·∫©m 'Truy·ªán Ki·ªÅu'?",
        "options": ["Nguy·ªÖn Du", "H·ªì Xu√¢n H∆∞∆°ng", "Nguy·ªÖn Tr√£i", "L√Ω Th√°i T·ªï"],
        "correctAnswer": 1,
        "explanation": "Nguy·ªÖn Du (1765-1820) l√† t√°c gi·∫£ c·ªßa ki·ªát t√°c 'Truy·ªán Ki·ªÅu', ƒë∆∞·ª£c coi l√† ƒë·ªânh cao c·ªßa vƒÉn h·ªçc Vi·ªát Nam.",
        "category": "VƒÉn h·ªçc"
      }
    ];
    
    try {
      const dataStr = JSON.stringify(sampleQuestions, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'sample-questions.json';
      link.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      alert('L·ªói khi t·∫°o file JSON m·∫´u!');
    }
  };

  const downloadSampleCSV = () => {
    try {
      const csvContent = `question,option_a,option_b,option_c,option_d,correct_answer,explanation,category
"Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† th√†nh ph·ªë n√†o?","Th√†nh ph·ªë H·ªì Ch√≠ Minh","H√† N·ªôi","ƒê√† N·∫µng","C·∫ßn Th∆°",2,"H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa n∆∞·ªõc C·ªông h√≤a X√£ h·ªôi ch·ªß nghƒ©a Vi·ªát Nam t·ª´ nƒÉm 1976, l√† trung t√¢m ch√≠nh tr·ªã - h√†nh ch√≠nh c·ªßa c·∫£ n∆∞·ªõc.","ƒê·ªãa l√Ω Vi·ªát Nam"
"K·∫øt qu·∫£ c·ªßa ph√©p t√≠nh 15 + 25 √ó 2 l√† bao nhi√™u?","80","65","55","70",2,"Theo th·ª© t·ª± ∆∞u ti√™n c·ªßa c√°c ph√©p t√≠nh:
B∆∞·ªõc 1: 25 √ó 2 = 50
B∆∞·ªõc 2: 15 + 50 = 65","To√°n h·ªçc c∆° b·∫£n"
"Nguy√™n t·ªë h√≥a h·ªçc n√†o c√≥ k√Ω hi·ªáu l√† ""O""?","Oxi (Oxygen)","V√†ng (Gold)","B·∫°c (Silver)","S·∫Øt (Iron)",1,"Oxi (Oxygen) c√≥ k√Ω hi·ªáu h√≥a h·ªçc l√† O, l√† nguy√™n t·ªë thi·∫øt y·∫øu cho s·ª± s·ªëng v√† qu√° tr√¨nh h√¥ h·∫•p c·ªßa con ng∆∞·ªùi.","H√≥a h·ªçc"
"Vi·ªát Nam tuy√™n b·ªë ƒë·ªôc l·∫≠p v√†o ng√†y n√†o?","2 th√°ng 9 nƒÉm 1945","30 th√°ng 4 nƒÉm 1975","19 th√°ng 8 nƒÉm 1945","2 th√°ng 7 nƒÉm 1976",1,"Ng√†y 2 th√°ng 9 nƒÉm 1945, Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc b·∫£n Tuy√™n ng√¥n ƒë·ªôc l·∫≠p t·∫°i Qu·∫£ng tr∆∞·ªùng Ba ƒê√¨nh, H√† N·ªôi, tuy√™n b·ªë n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a ra ƒë·ªùi.","L·ªãch s·ª≠ Vi·ªát Nam"
"T√°c gi·∫£ c·ªßa t√°c ph·∫©m ""Truy·ªán Ki·ªÅu"" l√† ai?","Nguy·ªÖn Du","H·ªì Xu√¢n H∆∞∆°ng","Nguy·ªÖn Tr√£i","Nguy·ªÖn B·ªânh Khi√™m",1,"Nguy·ªÖn Du (1765-1820) l√† t√°c gi·∫£ c·ªßa ki·ªát t√°c ""Truy·ªán Ki·ªÅu"" (t√™n ƒë·∫ßy ƒë·ªß l√† ""ƒêo·∫°n tr∆∞·ªùng t√¢n thanh""), ƒë∆∞·ª£c coi l√† ƒë·ªânh cao c·ªßa vƒÉn h·ªçc c·ªï ƒëi·ªÉn Vi·ªát Nam.","VƒÉn h·ªçc Vi·ªát Nam"`;
    
      // Th√™m UTF-8 BOM ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát
      const BOM = '\uFEFF';
      const dataBlob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'sample-questions.csv';
      link.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      alert('L·ªói khi t·∫°o file CSV m·∫´u!');
    }
  };

  const handleStartQuiz = () => {
    const config: QuizConfig = {
      mode,
      timeLimit: timeLimit * 60, // Convert to seconds
      totalQuestions,
      categories: selectedCategories
    };
    onStartQuiz(config);
  };

  const updateCategoryCount = (category: string, count: number) => {
    setSelectedCategories(prev => ({
      ...prev,
      [category]: count
    }));
  };

  const totalSelectedQuestions = Object.values(selectedCategories).reduce((sum, count) => sum + count, 0);

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-[#A50034] text-white px-4 md:px-6 py-3 md:py-4 border-b border-gray-300">
        <div className="flex items-center gap-2 md:gap-4">
          <Settings className="w-5 h-5 md:w-6 md:h-6" />
          <h1 className="text-base md:text-xl font-semibold">C·∫•u h√¨nh b√†i thi</h1>
        </div>
      </div>

      <div className="max-w-4xl mx-auto p-2 md:p-4">
        <div className="grid grid-cols-1 gap-3 md:gap-4">
          {/* Question Management */}
          <div className="bg-white rounded-lg border border-gray-300 p-4 md:p-6">
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Database className="w-5 h-5" />
              Qu·∫£n l√Ω ng√¢n h√†ng c√¢u h·ªèi
            </h2>
            
            {error && (
              <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700">
                <div className="flex items-start gap-2">
                  <span>‚ùå</span>
                  <div>
                    <div className="font-medium whitespace-pre-line">{error}</div>
                  </div>
                </div>
              </div>
            )}
            
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ch·∫ø ƒë·ªô nh·∫≠p
                </label>
                <select
                  value={importMode}
                  onChange={(e) => setImportMode(e.target.value as 'replace' | 'add')}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="add">Th√™m v√†o c√¢u h·ªèi hi·ªán c√≥</option>
                  <option value="replace">Thay th·∫ø t·∫•t c·∫£ c√¢u h·ªèi</option>
                </select>
                <p className="text-xs text-gray-500 mt-1">
                  {importMode === 'add' ? 
                    'üìù C√¢u h·ªèi m·ªõi s·∫Ω ƒë∆∞·ª£c th√™m v√†o danh s√°ch hi·ªán c√≥' : 
                    'üîÑ T·∫•t c·∫£ c√¢u h·ªèi c≈© s·∫Ω b·ªã x√≥a v√† thay th·∫ø b·∫±ng c√¢u h·ªèi m·ªõi'
                  }
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nh·∫≠p c√¢u h·ªèi (JSON/CSV/Excel)
                </label>
                <input
                  type="file"
                  disabled={loading}
                  accept=".json,.csv,.xlsx,.xls,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel"
                  onChange={handleFileImport}
                  className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50"
                />
              </div>
              
              <div className="grid grid-cols-3 gap-2">
                <button
                  onClick={handleExportQuestions}
                  disabled={questions.length === 0 || loading}
                  className="flex items-center justify-center gap-1 px-2 md:px-3 py-1.5 md:py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-xs md:text-sm"
                >
                  <Download className="w-3 h-3 md:w-4 md:h-4" />
                  <span className="hidden sm:inline">Xu·∫•t</span> JSON
                </button>
                <button
                  onClick={handleExportExcel}
                  disabled={questions.length === 0 || loading}
                  className="flex items-center justify-center gap-1 px-2 md:px-3 py-1.5 md:py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-xs md:text-sm"
                >
                  <Download className="w-3 h-3 md:w-4 md:h-4" />
                  <span className="hidden sm:inline">Xu·∫•t</span> Excel
                </button>
                <button
                  onClick={handleClearDatabase}
                  disabled={questions.length === 0 || loading}
                  className="flex items-center justify-center gap-1 px-2 md:px-3 py-1.5 md:py-2 bg-red-600 text-white rounded hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-xs md:text-sm"
                >
                  <Trash2 className="w-3 h-3 md:w-4 md:h-4" />
                  <span className="hidden sm:inline">X√≥a t·∫•t c·∫£</span><span className="sm:hidden">X√≥a</span>
                </button>

                <button
                  onClick={downloadSampleJSON}
                  className="flex items-center justify-center gap-1 px-2 md:px-3 py-1.5 md:py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-xs md:text-sm"
                >
                  <Download className="w-3 h-3 md:w-4 md:h-4" />
                  <span className="hidden sm:inline">JSON m·∫´u</span><span className="sm:hidden">JSON</span>
                </button>
                <button
                  onClick={downloadSampleCSV}
                  className="flex items-center justify-center gap-1 px-2 md:px-3 py-1.5 md:py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-xs md:text-sm"
                >
                  <Download className="w-3 h-3 md:w-4 md:h-4" />
                  <span className="hidden sm:inline">CSV m·∫´u</span><span className="sm:hidden">CSV</span>
                </button>
                <button
                  onClick={downloadSampleExcel}
                  className="flex items-center justify-center gap-1 px-2 md:px-3 py-1.5 md:py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-xs md:text-sm"
                >
                  <Download className="w-3 h-3 md:w-4 md:h-4" />
                  <span className="hidden sm:inline">Excel m·∫´u</span><span className="sm:hidden">Excel</span>
                </button>
              </div>

            <div className="border-t border-gray-200 pt-4 mt-4">
              <div className="space-y-2">
                <div className="text-xs text-gray-500">
                  <p>‚Ä¢ JSON: ƒê·ªãnh d·∫°ng khuy·∫øn ngh·ªã, d·ªÖ ch·ªânh s·ª≠a</p>
                  <p>‚Ä¢ CSV: C√≥ th·ªÉ m·ªü b·∫±ng Excel, h·ªó tr·ª£ UTF-8 v·ªõi BOM</p>
                  <p>‚Ä¢ Excel: ƒê·ªãnh d·∫°ng .xlsx, d·ªÖ ch·ªânh s·ª≠a, h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß ti·∫øng Vi·ªát</p>
                  <p>‚Ä¢ T·∫•t c·∫£ file ƒë·ªÅu ch·ª©a c√¢u h·ªèi m·∫´u ƒëa chuy√™n ƒë·ªÅ</p>
                </div>
              </div>
            </div>
              
              <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <Database className="w-4 h-4" />
                  <span className="font-medium">C∆° s·ªü d·ªØ li·ªáu:</span>
                </div>
                <p>üìä T·ªïng c√¢u h·ªèi: <strong>{loading ? 'ƒêang t·∫£i...' : questions.length.toLocaleString()}</strong>
                </p>
                <p>Danh m·ª•c: <strong>{categories.length}</strong> chuy√™n ƒë·ªÅ</p>
                {loading && <p className="text-blue-600">üîÑ ƒêang x·ª≠ l√Ω...</p>}
                {questions.length > 0 && (
                  <details className="mt-2">
                    <summary className="text-xs text-gray-500 cursor-pointer hover:text-gray-700">
                      üìã Xem chi ti·∫øt chuy√™n ƒë·ªÅ
                    </summary>
                    <div className="mt-1 text-xs text-gray-600 max-h-32 overflow-y-auto">
                      {categories.map(cat => {
                        const count = questions.filter(q => q.category === cat).length;
                        return (
                          <div key={cat} className="flex justify-between py-1">
                            <span className="truncate mr-2" title={cat}>{cat}</span>
                            <span className="font-mono">{count}</span>
                          </div>
                        );
                      })}
                    </div>
                  </details>
                )}
              </div>
            </div>
          </div>

          {/* Hidden Configuration Section - Only needed for reference, not displayed */}
        </div>
      </div>
      
    </div>
  );
};